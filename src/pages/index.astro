---
import Footer from "../components/Footer.astro";
import CenterHero from "../layouts/CenterHero.astro";
import Page from "../layouts/Page.astro";
import Button from "../components/Button.astro";
import Icon from "../components/Icon.astro";
import BorderModifierTemplate from "../components/borderModifier/BorderModifierTemplate.astro";
import BorderModifier from "../components/borderModifier/BorderModifier.astro";
import CssValueTemplate from "../components/cssValue/CssValueTemplate.astro";
import CssValue from "../components/cssValue/CssValue.astro";
import BorderRadius from "../components/borderRadius/BorderRadius.astro";
import BorderRadiusTemplate from "../components/borderRadius/BorderRadiusTemplate.astro";
import { Section } from "@vyke/astro";
---

<Page>
  <CenterHero direction="row" class="max-w-6xl mx-auto justify-around">
    <div class="flex flex-1 justify-around h-full bg-base-200">
      <div
        class="flex flex-1 box-container border border-base-300 h-full justify-center items-center p-8 shadow-inner"
      >
        <div
          class="w-10 h-10 bg-primary shadow-lg border-primary-content box relative"
        >
        </div>
      </div>
    </div>

    <div class="p-4">
      <form class="global-form flex justify-evenly">
        <div class="">
          <span class="pr-2">Width:</span>
          <CssValue defaultValue={40} name="width" />
        </div>
        <div class="">
          <span class="pr-2">Height:</span>
          <CssValue defaultValue={40} name="height" />
        </div>
      </form>
      <div class="border border-base-200 rounded-lg p-2 mt-4">
        <Button
          class="mt-2 w-full uppercase"
          classId="new-modifier-btn"
          modifier="outline"
          type="ghost"
          size="xs"
        >
          add border<Icon icon="plus" />
        </Button>
        <form class="modifiers-form mt-2 space-y-2">
          <BorderModifier sideValue="full" />
        </form>
      </div>
      <div class="border border-base-200 rounded-lg p-2 mt-2">
        <Button
          class="mt-2 w-full uppercase"
          classId="new-radius-btn"
          modifier="outline"
          type="ghost"
          size="xs"
        >
          add border radius<Icon icon="plus" />
        </Button>

        <form class="radius-form mt-2 space-y-2">
          <BorderRadius defaultValue={0} sideValue="full" />
        </form>
      </div>
    </div>
  </CenterHero>
  <Section class="flex justify-center">
    <pre
      class="bg-base-200 hover:bg-base-300 text-base-content rounded-lg p-4 pr-10"
      data-code>
    </pre>
  </Section>
  <BorderModifierTemplate />
  <CssValueTemplate />
  <BorderRadiusTemplate />
  <Footer />
</Page>

<script>
  import debounce from "debounce";
  import { query, select, on } from "@vyke/dom";
  import { unwrap } from "@vyke/results";
  import {
    createBorderModifier,
    initBorderModifiers,
  } from "../components/borderModifier/borderModifier";
  import { initCssValues } from "../components/cssValue/cssValue";
  import { initAllNumberValues } from "../components/numberValue/numberValue";
  import {
    createBorderRadius,
    initAllBorderRadius,
  } from "../components/borderRadius/borderRadius";

  initCssValues();
  initBorderModifiers();
  initAllNumberValues();
  initAllBorderRadius();

  const [box, globalForm, codeElement] = unwrap(
    select(
      query<HTMLDivElement>(".box"),
      query<HTMLFormElement>(".global-form"),
      query<HTMLPreElement>("[data-code]")
    )
  );
  const [newModifierBtn, modifiersForm] = unwrap(
    select(
      query<HTMLButtonElement>(".new-modifier-btn"),
      query<HTMLFormElement>(".modifiers-form")
    )
  );
  const [newRadiusBtn, radiusForm] = unwrap(
    select(
      query<HTMLButtonElement>(".new-radius-btn"),
      query<HTMLFormElement>(".radius-form")
    )
  );

  on(newModifierBtn, "click", () => {
    modifiersForm.append(createBorderModifier());
    applyValues();
  });

  on(newRadiusBtn, "click", () => {
    radiusForm.append(createBorderRadius());
    applyValues();
  });

  function applyValues() {
    const globalData = new FormData(globalForm);
    const modifiersData = new FormData(modifiersForm);
    const radiusData = new FormData(radiusForm);
    box.removeAttribute("style");

    for (const [name, field] of [
      ...globalData,
      ...modifiersData,
      ...radiusData,
    ]) {
      const [fieldName, type] = name.split(":") as [string, ...Array<string>];

      if (type === "unit") {
        continue;
      }

      switch (fieldName) {
        case "borderStyle":
        case "borderTopStyle":
        case "borderRightStyle":
        case "borderBottomStyle":
        case "borderLeftStyle":
          setStyle(box, fieldName, `${field}`);
          break;
        case "width":
        case "height":
        case "borderWidth":
        case "borderTopWidth":
        case "borderRightWidth":
        case "borderBottomWidth":
        case "borderLeftWidth":
        case "borderRadius":
        case "borderTopLeftRadius":
        case "borderTopRightRadius":
        case "borderBottomRightRadius":
        case "borderBottomLeftRadius":
          const unit = type
            ? globalData.get(`${fieldName}:unit`) ||
              modifiersData.get(`${fieldName}:unit`) ||
              "px"
            : "px";
          const value = `${field}${unit}`;
          setStyle(box, fieldName, value);
          break;
      }
    }

    codeElement.innerHTML = formatStyleCode(box.getAttribute("style") ?? "");
  }

  function formatStyleCode(origin: string) {
    return [
      `.<span class="text-primary">box</span> {`,
      ...origin
        .replaceAll(/; /g, ";\n")
        .split("\n")
        .map((line) => {
          return `\t${line}`;
        }),
      "}",
    ]
      .join("\n")
      .trim();
  }

  const debouncedApplyValues = debounce(applyValues);

  on(globalForm, "change", (_event) => {
    debouncedApplyValues();
  });

  on(modifiersForm, "change", () => {
    debouncedApplyValues();
  });

  on(radiusForm, "change", () => {
    debouncedApplyValues();
  });

  applyValues();

  function setStyle<
    TElement extends ElementCSSInlineStyle,
    TName extends keyof CSSStyleDeclaration,
  >(element: TElement, name: TName, value: TElement["style"][TName]) {
    element.style[name] = value;
  }
</script>

<style>
  .box {
    transition: all 0.8s /*cubic-bezier(1, 0, 0, 1)*/;
  }

  .box::before,
  .box::after {
    content: " ";
    @apply absolute bg-primary-content;
  }

  .box::before {
    @apply left-1/2 top-1/2;
    width: 10px;
    height: 2px;
    transform: translate(-5px, -1px);
  }
  .box::after {
    @apply left-1/2 top-1/2;
    height: 10px;
    width: 2px;
    transform: translate(-1px, -5px);
  }

  .box-container {
    background-image: radial-gradient(
      var(--fallback-bc, oklch(var(--p) / 0.5)) 1px,
      transparent 0
    );
    background-size: 40px 40px;
    background-position: -19px -19px;
  }
</style>
